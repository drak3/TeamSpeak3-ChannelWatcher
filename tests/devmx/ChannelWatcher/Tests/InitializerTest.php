<?php

namespace devmx\ChannelWatcher\Tests;

use devmx\ChannelWatcher\Initializer;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-08-10 at 23:52:06.
 */
class InitializerTest extends \PHPUnit_Framework_TestCase {
    
    protected $fileSystemMock;
    
    protected $storageMock;
    
    protected $initableStorageMock;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->fileSystemMock = $this->getMock('\Symfony\Component\Filesystem\Filesystem');
        $this->storageMock = $this->getMockForAbstractClass('\devmx\ChannelWatcher\Storage\StorageInterface');
        $this->initableStorageMock = $this->getMockForAbstractClass('\devmx\ChannelWatcher\Storage\InitableStorageInterface');
    }

    
    /**
     * @covers devmx\ChannelWatcher\Initializer::initEnviroment
     * @covers devmx\ChannelWatcher\Initializer::initStorageDir
     * @covers devmx\ChannelWatcher\Initializer::__construct
     * @covers devmx\ChannelWatcher\Initializer::setFileSystem
     * @covers devmx\ChannelWatcher\Initializer::initStorage
     * @covers devmx\ChannelWatcher\Initializer::initStorageDir
     * @covers devmx\ChannelWatcher\Initializer::storageIsInited
     * @covers devmx\ChannelWatcher\Initializer::storageDirIsInited
     */
    public function testInitEnviroment_initableStorage() {
        $initer = new Initializer($this->initableStorageMock, 'foo');
        $this->expectDirectoryCreation($initer);
        $this->initableStorageMock->expects($this->once())
                                  ->method('isInited')
                                  ->will($this->returnValue(false));
        $this->initableStorageMock->expects($this->once())
                                  ->method('init');
        $initer->initEnviroment();
    }
    
    /**
     * @covers devmx\ChannelWatcher\Initializer::initEnviroment
     * @covers devmx\ChannelWatcher\Initializer::initStorageDir
     * @covers devmx\ChannelWatcher\Initializer::__construct
     * @covers devmx\ChannelWatcher\Initializer::setFileSystem
     * @covers devmx\ChannelWatcher\Initializer::initStorage
     * @covers devmx\ChannelWatcher\Initializer::initStorageDir
     * @covers devmx\ChannelWatcher\Initializer::storageIsInited
     * @covers devmx\ChannelWatcher\Initializer::storageDirIsInited
     */
    public function testInitEnviroment_normalStorage() {
        $initer = new Initializer($this->storageMock, 'foo');
        $this->expectDirectoryCreation($initer);
        $initer->initEnviroment();
    }
    
    /**
     * @covers devmx\ChannelWatcher\Initializer::initEnviroment
     * @covers devmx\ChannelWatcher\Initializer::initStorageDir
     * @covers devmx\ChannelWatcher\Initializer::__construct
     * @covers devmx\ChannelWatcher\Initializer::setFileSystem
     * @covers devmx\ChannelWatcher\Initializer::initStorage
     * @covers devmx\ChannelWatcher\Initializer::initStorageDir
     * @covers devmx\ChannelWatcher\Initializer::storageIsInited
     * @covers devmx\ChannelWatcher\Initializer::storageDirIsInited
     */
    public function testInitEnviroment_initedStorageDir() {
        $initer = new Initializer($this->storageMock, 'foo');
        $initer->setFilesystem($this->fileSystemMock);
        $this->fileSystemMock->expects($this->once())
                             ->method('exists')
                             ->with($this->equalTo('foo'))
                             ->will($this->returnValue(true));
        $this->fileSystemMock->expects($this->never())
                             ->method('mkdir');
        $initer->initEnviroment();
    }
    
    /**
     * @covers devmx\ChannelWatcher\Initializer::initEnviroment
     * @covers devmx\ChannelWatcher\Initializer::initStorageDir
     * @covers devmx\ChannelWatcher\Initializer::__construct
     * @covers devmx\ChannelWatcher\Initializer::setFileSystem
     * @covers devmx\ChannelWatcher\Initializer::initStorage
     * @covers devmx\ChannelWatcher\Initializer::initStorageDir
     * @covers devmx\ChannelWatcher\Initializer::storageIsInited
     * @covers devmx\ChannelWatcher\Initializer::storageDirIsInited
     */
    protected function expectDirectoryCreation($initer) {
        $initer->setFilesystem($this->fileSystemMock);
        $this->fileSystemMock->expects($this->once())
                             ->method('exists')
                             ->with($this->equalTo('foo'))
                             ->will($this->returnValue(false));
        $this->fileSystemMock->expects($this->once())
                             ->method('mkdir')
                             ->with($this->equalTo('foo'));
    }

    

}
