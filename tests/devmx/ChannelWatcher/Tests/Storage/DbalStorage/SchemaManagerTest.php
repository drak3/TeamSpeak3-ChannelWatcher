<?php

namespace devmx\ChannelWatcher\Tests\Storage\DbalStorage;

use devmx\ChannelWatcher\Storage\DbalStorage\SchemaManager;
use Doctrine\Tests\TestUtil;
use Doctrine\DBAL\Connection;
use Doctrine\DBAL\Schema\Schema;


/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-08-04 at 17:02:52.
 */
class SchemaManagerTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var SchemaManager
     */
    protected $mockedManager;
    
    protected $connectionMock;
    
    protected $dbManager;
    
    /**
     *
     * @var Connection
     */
    protected $connection;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->connectionMock = $this->getMockBuilder('\Doctrine\DBAL\Connection')
                                     ->disableOriginalConstructor()
                                     ->disableOriginalClone()
                                     ->getMock();
        $this->mockedManager = new SchemaManager($this->connectionMock, 'foo');
        $this->connection = TestUtil::getConnection();
    }
    
    protected function tearDown() {
        $this->connection->close();
    }
    

    /**
     * @covers devmx\ChannelWatcher\Storage\DbalStorage\SchemaManager::createTables
     * @covers devmx\ChannelWatcher\Storage\DbalStorage\SchemaManager::getMigrateStatements
     * @covers devmx\ChannelWatcher\Storage\DbalStorage\SchemaManager::__construct
     * @covers devmx\ChannelWatcher\Storage\DbalStorage\SchemaManager::getSchema
     */
    public function testCreateTables() {
                
        $conn = $this->connection;
        
        $expectedSchema = $this->getExpectedSchema($conn, 'foo_');
        
        $manager = new SchemaManager($conn, 'foo_');
        $manager->createTables();
        $createdSchema = $conn->getSchemaManager()->createSchema();
        
        
        
        $diff = \Doctrine\DBAL\Schema\Comparator::compareSchemas($createdSchema, $expectedSchema);
       
        $emptyDiff = new \Doctrine\DBAL\Schema\SchemaDiff();
                
        $this->assertEquals($emptyDiff, $diff);
    }
    
    protected function getExpectedSchema(Connection $conn, $pref) {
        $expectedSchema = SchemaManager::getSchema($pref.'channels', $pref.'crawl_data');
        
        //fix differences in handling autoincrement        
        if($conn->getDatabasePlatform() instanceof \Doctrine\DBAL\Platforms\SqlitePlatform) {
            $expectedSchema->getTable('foo_crawl_data')
                           ->getColumn('id')
                           ->setAutoincrement(false);
        }
        
        if($conn->getDatabasePlatform() instanceof \Doctrine\DBAL\Platforms\PostgreSqlPlatform) {
            $expectedSchema->createSequence('foo_crawl_data_id_seq');
        }
        
        return $expectedSchema;
    }
    
    public function testCreateTables_NoOverwrite() {
                        
        $conn = $this->connection;
        
        if($conn->getDatabasePlatform() instanceof \Doctrine\DBAL\Platforms\SqlitePlatform) {
            $this->markTestSkipped('Creating schema on a Sqlite db is not supported');
        }
        
        $expectedSchemaPt1 = $this->getExpectedSchema($conn, 'foo_');
        
        $manager = new SchemaManager($conn, 'foo_');
        $manager->createTables();
        
        $manager2 = new SchemaManager($conn, 'bar_');
        $manager2->createTables();
        
        $expectedSchemaPt2 = $this->getExpectedSchema($conn, 'bar_');
        
        $expectedSchema = $this->mergeSchemas($expectedSchemaPt1, $expectedSchemaPt2);
        
        $createdSchema = $conn->getSchemaManager()->createSchema();
        
        $diff = \Doctrine\DBAL\Schema\Comparator::compareSchemas($createdSchema, $expectedSchema);
       
        $emptyDiff = new \Doctrine\DBAL\Schema\SchemaDiff();
        
        $this->assertEquals($emptyDiff, $diff);
                
    }
    
    /**
     * @expectedException \devmx\ChannelWatcher\Storage\Exception
     * @expectedExceptionMessage You cannot run the channelwatcher with a non-empty sqlite-db
     */
    public function testCreateTables_SqliteExceptionOnOverwrite() {
        $conn = $this->connection;
        
        if(! ($conn->getDatabasePlatform() instanceof \Doctrine\DBAL\Platforms\SqlitePlatform) ) {
            $this->markTestSkipped('This test is sqlite specific');
        }
        
        $manager = new SchemaManager($conn, 'foo_');
        $manager->createTables();
        
        $manager2 = new SchemaManager($conn, 'bar_');
        $manager->createTables();
    }
    
    protected function mergeSchemas(Schema $s1, Schema $s2) {
        return new Schema(array_merge($s1->getTables(), $s2->getTables()), array_merge($s1->getSequences(), $s2->getSequences()), null);
    }
    
    public function testSchemaIsCreated_equal() {
        $conn = $this->connection;
        $manager = new SchemaManager($conn, 'barasdf_');
        $manager->createTables();
        $this->assertTrue($manager->schemaIsCreated());
    }
    
    public function testSchemaIsCreated_nonEqual() {
        $conn = $this->connection;
        $manager = new SchemaManager($conn, 'barasdf_');
        
        $schema = SchemaManager::getSchema($manager->getChannelTableName(), $manager->getCrawlDateTableName());
        $schema->dropTable($manager->getChannelTableName());
                
        $currentSchema = clone $conn->getSchemaManager()->createSchema();
        $sql = $currentSchema->getMigrateToSql($schema, $conn->getDatabasePlatform());
        foreach ($sql as $statement) {
                $conn->executeQuery($statement);
        }
        $this->assertFalse($manager->schemaIsCreated());
    }
    
    public function testSchemaIsCreated_additionalTables() {
        $conn = $this->connection;
        $manager = new SchemaManager($conn, 'barasdf_');
        
        $schema = SchemaManager::getSchema($manager->getChannelTableName(), $manager->getCrawlDateTableName());
        $schema->createTable('foobsdfwirhlkfsf')
               ->addColumn('id', 'integer', array('unsinged' => true));
                        
        $currentSchema = clone $conn->getSchemaManager()->createSchema();
        $sql = $currentSchema->getMigrateToSql($schema, $conn->getDatabasePlatform());
        foreach ($sql as $statement) {
                $conn->executeQuery($statement);
        }
        $this->assertTrue($manager->schemaIsCreated());
    }

    /**
     * @covers devmx\ChannelWatcher\Storage\DbalStorage\SchemaManager::getChannelTableName
     */
    public function testGetChannelTableName() {
        $m = new SchemaManager($this->connectionMock, 'fsdfwq');
        $this->assertEquals('fsdfwqchannels', $m->getChannelTableName());
    }
    
    

    /**
     * @covers devmx\ChannelWatcher\Storage\DbalStorage\SchemaManager::getCrawlDateTableName
     */
    public function testGetCrawlDateTableName() {
        $m = new SchemaManager($this->connectionMock, 'fsdfwq');
        $this->assertEquals('fsdfwqcrawl_data', $m->getCrawlDateTableName());
    }
    
    

}
