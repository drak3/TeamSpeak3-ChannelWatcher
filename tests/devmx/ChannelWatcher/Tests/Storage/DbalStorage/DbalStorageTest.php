<?php

namespace devmx\ChannelWatcher\Tests\Storage\DbalStorage;

use devmx\ChannelWatcher\Storage\DbalStorage\DbalStorage;
use Doctrine\Tests\TestUtil;
use Doctrine\DBAL\Connection;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-11-02 at 17:31:56.
 */
class DbalStorageTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Connection
     */
    protected $conn;
    
    /**
     *
     * @var \devmx\ChannelWatcher\Storage\DbalStorage\SchemaManager
     */
    protected $manager;
    
    /**
     *
     * @var DbalStorage
     */
    protected $storage;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
       $this->conn = TestUtil::getConnection();
       $this->manager = new \devmx\ChannelWatcher\Storage\DbalStorage\SchemaManager($this->conn, 'asdf_');
       $this->storage = new DbalStorage($this->conn, $this->manager);
       
    }
    
    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        if($this->conn !== null) {
            $this->conn->close();
            $this->conn = null;
        }
    }
    
    protected function createTestData() {
        $this->storage->init();
        //simulates 3 subsequent crawls
        $oneHour = new \DateInterval('PT1H');
        
        $t1 = new \DateTime('00:00:00');
        $t2 = (clone $t1);
        $t2 = $t2->add($oneHour);
        $t3 = clone $t2;
        $t3 = $t3->add($oneHour);
                
        //at $t1 (00:00)
        //c1: full
        //c2: full
        //c3: full
        //c4: empty
        $this->storage->updateLastCrawlTime($t1);
        $this->storage->update(1, true,  $t1);
        $this->storage->update(2, true,  $t1);
        $this->storage->update(3, true,  $t1);
        $this->storage->update(4, false, $t1);
        
        //at $t2 (01:00)
        //c1: full
        //c2: full
        //c3: empty
        //c4: empty
        $this->storage->updateLastCrawlTime($t2);
        $this->storage->update(1, true,  $t2);
        $this->storage->update(2, true,  $t2);
        $this->storage->update(3, false, $t2);
        $this->storage->update(4, false, $t2);
        
        //at $t3 (02:00)
        //c1: full
        //c2: empty
        //c3: empty
        //c4: empty
        $this->storage->updateLastCrawlTime($t3);
        $this->storage->update(1, true,  $t3);
        $this->storage->update(2, false, $t3);
        $this->storage->update(3, false, $t3);
        $this->storage->update(4, false, $t3);
        
        return array($t1,$t2,$t3);
    }

    /**
     * @covers devmx\ChannelWatcher\Storage\DbalStorage\DbalStorage
     */
    public function testHas_Functional() {
        $this->createTestData();
        
        //now, the storage should have channel 1 2 3 and 4 but not channel 5 or 0
        $this->assertTrue($this->storage->has(1));
        $this->assertTrue($this->storage->has(2));
        $this->assertTrue($this->storage->has(3));
        $this->assertTrue($this->storage->has(4));
        
        $this->assertFalse($this->storage->has(5));
        $this->assertFalse($this->storage->has(0));
    }
    
    /**
     * @covers devmx\ChannelWatcher\Storage\DbalStorage\DbalStorage
     */
    public function testGetChannelsEmptyFor_Functional() {
        list($t1, $t2, $t3) = $this->createTestData();
        
        $oneHour = new \DateInterval('PT1H');
        $twoHours = new \DateInterval('PT2H');
        $threeHours = new \DateInterval('PT3H');
        
        //at $t2
        //c3 and c4 has last been seen full (init) one hour ago
        $this->assertEquals(array(3, 4), $this->storage->getChannelsEmptyFor($oneHour, $t2));
        
        //at $t3
        //c3 and c4 has last been seen full two hours ago
        //c2, c3 and c4 are  have last been senn full one hour ago
        $this->assertEquals(array(3, 4), $this->storage->getChannelsEmptyFor($twoHours, $t3));
        $this->assertEquals(array(2, 3, 4), $this->storage->getChannelsEmptyFor($oneHour, $t3));
        
        //at $t3+1hour
        //c3 and c4 has last been seen full three hours ago
        //c2, c3 and c4 have last been seen full two hours ago
        //c1, c2, c3 and c4 have last been seen full one hour ago
        $t4 = clone $t3;
        $t4 = $t4->add($oneHour);
        $this->assertEquals(array(3, 4), $this->storage->getChannelsEmptyFor($threeHours, $t4));
        $this->assertEquals(array(2, 3, 4), $this->storage->getChannelsEmptyFor($twoHours, $t4));
        $this->assertEquals(array(1, 2, 3, 4), $this->storage->getChannelsEmptyFor($oneHour, $t4));
    }
    
    /**
     * @covers devmx\ChannelWatcher\Storage\DbalStorage\DbalStorage
     */
    public function testGetCrawlsOccuredIn_Functional() {
        list($t1, $t2, $t3) = $this->createTestData();
        
        $oneHour = new \DateInterval('PT1H');
        $twoHours = new \DateInterval('PT2H');
        $threeHours = new \DateInterval('PT3H');
        $fourHours = new \DateInterval('PT4H');
        
        //at $t1
        //one crawl occured in the last hour
        //one crawl occured in the last two hours
        //one crawl occured in the last three hours
        $this->assertCount(1, $this->storage->getCrawlDatesOccuredIn($oneHour, $t1));
        $this->assertCount(1, $this->storage->getCrawlDatesOccuredIn($twoHours, $t1));
        $this->assertCount(1, $this->storage->getCrawlDatesOccuredIn($threeHours, $t1));
        
        //at $t2
        //one crawl occured in the last hour
        //two crawls occured in the last two hours
        //two crawls occured in the last three hours
        $this->assertCount(1, $this->storage->getCrawlDatesOccuredIn($oneHour, $t2));
        $this->assertCount(2, $this->storage->getCrawlDatesOccuredIn($twoHours, $t2));
        $this->assertCount(2, $this->storage->getCrawlDatesOccuredIn($threeHours, $t2));
        
        //at $t3
        //one crawl occured in the last hour
        //two crawls occured in the last two hours
        //three crawls occured in the last three hours
        //three crawls occured in the last four hours
        $this->assertCount(1, $this->storage->getCrawlDatesOccuredIn($oneHour, $t3));
        $this->assertCount(2, $this->storage->getCrawlDatesOccuredIn($twoHours, $t3));
        $this->assertCount(3, $this->storage->getCrawlDatesOccuredIn($threeHours, $t3));
        $this->assertCount(3, $this->storage->getCrawlDatesOccuredIn($fourHours, $t3));
    }
    
    /**
     * @covers devmx\ChannelWatcher\Storage\DbalStorage\DbalStorage
     */
    public function testIsInited_Functional_EmptyDb() {
        $this->assertFalse($this->storage->isInited());
    }
    
    /**
     * @covers devmx\ChannelWatcher\Storage\DbalStorage\DbalStorage
     */
    public function testIsInited_Functional_InitedDb() {
        $this->manager->createTables();
        $this->assertTrue($this->storage->isInited());
    }
     

}
