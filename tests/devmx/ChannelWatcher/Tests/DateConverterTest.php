<?php

namespace devmx\ChannelWatcher\Tests;

use devmx\ChannelWatcher\DateConverter;

/**
 * Test class for DateConverter.
 * Generated by PHPUnit on 2012-05-20 at 13:42:00.
 */
class DateConverterTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @covers devmx\ChannelWatcher\DateConverter
     */
    public function testFullConvert()
    {
        $spec = array(
                  'years' => 1,
                  'months' => 2,
                  'weeks' => 3,
                  'days' => 4,
                  'hours' => 5,
                  'minutes' => 6,
                  'seconds' => 12,
              );
        $interval = new \DateInterval('P1Y2M25DT5H6M12S');
        $this->assertEquals($interval, DateConverter::convertArrayToInterval($spec));
    }
    
    /**
     * @covers devmx\ChannelWatcher\DateConverter
     */
    public function testOverflow()
    {
        $spec = array(
            'months' => 13,
            'weeks' => 2,
            'days' => 14,
            'hours' => 25,
            'minutes' => 70,
            'seconds' => 70,
        );
        $interval = new \DateInterval('P13M28DT25H70M70S');
        $this->assertEquals($interval, DateConverter::convertArrayToInterval($spec));
    }
    
    /**
     * @covers devmx\ChannelWatcher\DateConverter
     */
    public function testFewKeys()
    {
        $spec = array(
          'weeks' => 12,
          'minutes' => 13
        );
        $interval = new \DateInterval('P12WT13M');
        $this->assertEquals($interval, DateConverter::convertArrayToInterval($spec));
    }
    
    /**
     * @covers devmx\ChannelWatcher\DateConverter
     */
    public function testTimeOnly()
    {
        $spec = array(
          'minutes' => 14,
          'hours' => 15,
        );
        $interval = new \DateInterval('PT15H14M');
        $this->assertEquals($interval, DateConverter::convertArrayToInterval($spec));
    }
    
    /**
     * @covers devmx\ChannelWatcher\DateConverter
     */
    public function testDateOnly()
    {
        $spec = array(
            'weeks' => 13,
            'years' => 1,
        );
        $interval = new \DateInterval('P1Y13W');
        $this->assertEquals($interval, DateConverter::convertArrayToInterval($spec));
    }

    /**
     * @covers devmx\ChannelWatcher\DateConverter
     */
    public function testUppercasedKeys()
    {
        $spec = array(
            'Weeks' => 13,
            'yearS' => 1,
        );
        $interval = new \DateInterval('P1Y13W');
        $this->assertEquals($interval, DateConverter::convertArrayToInterval($spec));
    }

    /**
     * @expectedException \InvalidArgumentException
     * @covers devmx\ChannelWatcher\DateConverter
     */
    public function testInvalidKey()
    {
        $spec = array(
            'week' => 1
        );
        DateConverter::convertArrayToInterval($spec);
    }

}
